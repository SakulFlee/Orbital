name: Main

on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - '**'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  clippy:
    runs-on: ubuntu-latest
    steps:
      - name: ⏬ Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: 💾 Cache
        uses: actions/cache@v4.2.0
        with:
          path: target/
          key: target

      - name: 🦀 Rust setup
        run: |
          rustup default stable
          rustup update

      - name: 🛠️ Install dependencies
        run: sudo apt-get install -y libudev-dev

      - name: 📎 Clippy
        env:
          SKIP_GLTF_EXPORT: true
        run: cargo clippy --fix

      - name: 👀 Checking for changes ...
        id: changes
        run: |
          STATUS="$(git status --porcelain)"
          echo -e "Status:\n$STATUS"
          echo "status=$STATUS" >> "$GITHUB_OUTPUT"

      - name: ⏫ Push changes
        if: ${{ steps.changes.outputs.status != '' }}
        run: |
          echo "Changes detected. Committing and pushing..."

          # Print status to visually see what changed
          git status

          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

          git add --all
          git commit -m "Automated commit by CI"
          git push

          echo "Git push completed."

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - name: ⏬ Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: 💾 Cache
        uses: actions/cache@v4.2.0
        with:
          path: target/
          key: target

      - name: 🦀 Rust setup
        run: |
          rustup default stable
          rustup update

      - name: 🛠️ Install dependencies
        run: sudo apt-get install -y libudev-dev

      - name: 🧹 RustFmt
        env:
          SKIP_GLTF_EXPORT: true
        run: cargo fmt --verbose --all

      - name: 👀 Checking for changes ...
        id: changes
        run: |
          STATUS="$(git status --porcelain)"
          echo -e "Status:\n$STATUS"
          echo "status=$STATUS" >> "$GITHUB_OUTPUT"

      - name: ⏫ Push changes
        if: ${{ steps.changes.outputs.status != '' }}
        run: |
          echo "Changes detected. Committing and pushing..."
          
          # Print status to visually see what changed
          git status
          
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          
          git add --all
          git commit -m "Automated commit by CI"
          git push
          
          echo "Git push completed."

  check:
    runs-on: ubuntu-latest
    steps:
      - name: ⏬ Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: 💾 Cache
        uses: actions/cache@v4.2.0
        with:
          path: target/
          key: target

      - name: 🦀 Rust setup
        run: |
          rustup default stable
          rustup update

      - name: 🛠️ Install dependencies
        run: sudo apt-get install -y libudev-dev

      - name: 🔍 Check
        env:
          SKIP_GLTF_EXPORT: true
        run: cargo check

  test:
    runs-on: ubuntu-latest
    steps:
      - name: ⏬ Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: 💾 Cache
        uses: actions/cache@v4.2.0
        with:
          path: target/
          key: target

      - name: 🦀 Rust setup
        run: |
          rustup default stable
          rustup update

      - name: 🛠️ Install LibUDev (Linux)
        # Note: LibUDev is for GilRs (controller inputs)
        run: sudo apt-get install -y libudev-dev:${{ matrix.arch }}

      - name: 🛠️ Install Mesa (Linux)
        # Note: Mesa is required for software rendering using llvmpipe
        run: sudo apt-get install -y mesa-utils

      - name: 🛠️ Install Blender (Linux)
        # Note: Draco is required for glTF compression and doesn't come with Blender
        run: sudo apt-get install -y blender python3-numpy libdraco-dev draco

      - name: 🧪 Test
        run: cargo test

  build:
    runs-on: ${{ matrix.os }}
    needs:
      - clippy
      - rustfmt
      - check
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - target: "x86_64-unknown-linux-gnu"
            arch: "amd64"
            pc: "/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
            os: "ubuntu-latest"
            gcc: "gcc-x86-64-linux-gnu"
          - target: "aarch64-unknown-linux-gnu"
            arch: "arm64"
            pc: "/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
            os: "ubuntu-latest"
            gcc: "gcc-aarch64-linux-gnu"
          - target: "armv7-unknown-linux-gnueabihf"
            arch: "armhf"
            pc: "/usr/lib/arm-linux-gnueabihf/pkgconfig:/usr/share/pkgconfig"
            os: "ubuntu-latest"
            gcc: "gcc-arm-linux-gnueabihf"
          - target: "arm-unknown-linux-gnueabihf"
            arch: "armhf"
            pc: "/usr/lib/arm-linux-gnueabihf/pkgconfig:/usr/share/pkgconfig"
            os: "ubuntu-latest"
            gcc: "gcc-arm-linux-gnueabihf"
          # macOS
          - target: "aarch64-apple-darwin"
            os: "macos-latest"
          - target: "x86_64-apple-darwin"
            os: "macos-latest"
          # Windows
          - target: "x86_64-pc-windows-gnu"
            os: "windows-latest"
          - target: "x86_64-pc-windows-msvc"
            os: "windows-latest"
          - target: "aarch64-pc-windows-msvc"
            os: "windows-latest"
    steps:
      - name: ⏬ Checkout
        uses: actions/checkout@v4

      - name: 💾 Cache
        uses: actions/cache@v4.2.0
        with:
          path: target/
          key: target

      - name: 🦀 Rust setup
        run: |
          rustup default stable
          rustup update
          rustup target add ${{ matrix.target }}

      - name: 🛠️ Configure repositories (Linux)
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.arch != 'amd64' }}
        run: |
          # Add architecture
          sudo dpkg --add-architecture ${{ matrix.arch }}
          
          # Removing any current sources
          sudo rm -rf /etc/apt/sources.list.d/
          sudo rm -f /etc/apt/sources.list
          
          # Set expected source mirrors
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ noble-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ noble main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ noble-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ noble-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          
          # Update mirrors
          sudo apt-get update

      - name: 🛠️ Install GCC (Linux)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: sudo apt-get install -y ${{ matrix.gcc }}

      - name: 🛠️ Install LibUDev (Linux)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        # Note: LibUDev is for GilRs (controller inputs)
        run: sudo apt-get install -y libudev-dev:${{ matrix.arch }}

      - name: 🛠️ Install Mesa (Linux)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        # Note: Mesa is required for software rendering using llvmpipe
        run: sudo apt-get install -y mesa-utils

      - name: 🛠️ Install Blender (Linux)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        # Note: Draco is required for glTF compression and doesn't come with Blender
        run: sudo apt-get install -y blender python3-numpy libdraco-dev draco

      - name: 🛠️ Install Blender (macOS)
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: brew install blender

      - name: 🛠️ Install Blender (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: pwsh
        run: choco install blender --no-progress

      - name: ➕ Add Blender to PATH (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          $blenderBaseDir = "C:\Program Files\Blender Foundation"
          Write-Host "Searching for Blender installation in: $blenderBaseDir"
          
          # Get all child directories, sort by creation time (newest first), and take the first one
          # In a clean CI environment, this should be the only or newest Blender version
          $blenderInstallDir = Get-ChildItem -Path $blenderBaseDir -Directory | Sort-Object CreationTime -Descending | Select-Object -First 1
          
          if ($blenderInstallDir) {
             $blenderPath = $blenderInstallDir.FullName
             Write-Host "Discovered Blender installation at: $blenderPath"
          
             # Verify blender.exe exists inside the discovered directory
             $blenderExeFullPath = Join-Path $blenderPath "blender.exe"
             if (Test-Path $blenderExeFullPath) {
                 Write-Host "Confirmed blender.exe exists at: $blenderExeFullPath"
                 # Add the discovered Blender installation directory to the PATH
                 echo "$blenderPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                 Write-Host "Blender added to PATH: $blenderPath"
             } else {
                 Write-Host "ERROR: blender.exe not found at expected path: $blenderExeFullPath"
                 Exit 1 # Fail the step if blender.exe is missing
             }
          } else {
             Write-Host "ERROR: No Blender installation directory found under $blenderBaseDir."
             Exit 1 # Fail the step if no directory is found
          }        

      - name: 🔨 Build
        env:
          PKG_CONFIG_SYSROOT_DIR: /
          PKG_CONFIG_PATH: ${{ matrix.pc }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: ➕ Prepare upload folder
        run: mkdir upload

      - name: DEBUG
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          ls -al -R target/
          find target/${{ matrix.target }}

      - name: 🔎 Find files to upload (Linux / macOS)
        if: ${{ ! startsWith(matrix.os, 'windows') }}
        run: find target/${{ matrix.target }}/release -mindepth 1 -maxdepth 1 -type f -not -name '*.d' -not -name '*.rlib' -not -name '.cargo-lock' -not -name 'CACHEDIR.TAG' -exec mv {} upload/ \;

      - name: 🔎 Find files to upload (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: Get-ChildItem -Path "target/${{ matrix.arch }}/release" -Recurse -Depth 0 -File -Exclude "*.d", "*.rlib", ".cargo-lock", "CACHEDIR.TAG" | Move-Item -Destination "upload/" -Force

      - name: 👀 Show files to be uploaded (Linux / macOS)
        if: ${{ ! startsWith(matrix.os, 'windows') }}
        run: ls -al upload/

      - name: 👀 Show files to be uploaded (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: Get-ChildItem -Path upload/

      - name: ⬆️ Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: upload/**

  release:
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: ⬇️ Download artifacts from this run
        uses: actions/download-artifact@v4

      - name: ➕ Prepare upload folder
        run: mkdir upload

      - name: 🔄 Rename and move files to upload folder
        run: |
          for arch_dir in "$(find . -type d -depth 1 -name 'build-*')"; do
            # Get the architecture name from the build directory
            arch=$(basename "$arch_dir")
          
            # Iterate over each file and subdirectory within the build directory
            for item in "$(find '$arch_dir' -depth 1)"; do
              filename=$(basename "$item")
              
              # Move and rename files
              mv -n "$item" "${upload_dir}/${filename}_${arch}"
            done
          done

      - name: 👀 Show files to be uploaded
        run: ls -al -R upload
